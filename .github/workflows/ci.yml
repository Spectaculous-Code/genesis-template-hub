name: CI

on:
  pull_request:
  push:
    branches: [main]

permissions:
  contents: read
  pull-requests: write

jobs:
  typecheck_lint_test:
    name: TypeScript · Lint · Tests
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: TypeScript check
        run: npm run typecheck --if-present || npx tsc --noEmit

      - name: Lint & Format
        run: |
          if npm run -s biome --help > /dev/null 2>&1 || npx -y @biomejs/biome --version > /dev/null 2>&1; then
            npx @biomejs/biome lint .
            npx @biomejs/biome format . --check
          else
            npm run lint --if-present
            npm run format:check --if-present
          fi

      - name: Unit Tests
        run: npm test --if-present -- --run

  npm_security:
    name: NPM Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: NPM Audit (High & Critical)
        run: npm audit --audit-level=high
        continue-on-error: true

      - name: Check for known vulnerabilities
        run: |
          if npm audit --audit-level=critical --json | jq -e '.metadata.vulnerabilities.critical > 0' > /dev/null 2>&1; then
            echo "❌ Critical vulnerabilities found!"
            npm audit --audit-level=critical
            exit 1
          else
            echo "✅ No critical vulnerabilities"
          fi

  openapi_types:
    name: OpenAPI Types
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    steps:
      - uses: actions/checkout@v4
      
      - name: Check if OpenAPI file exists
        id: check_openapi
        run: |
          if [ -f "openapi.yaml" ] || [ -f "openapi.yml" ]; then
            echo "exists=true" >> $GITHUB_OUTPUT
          else
            echo "exists=false" >> $GITHUB_OUTPUT
            echo "⚠️ No OpenAPI file found, skipping type generation"
          fi
      
      - uses: actions/setup-node@v4
        if: steps.check_openapi.outputs.exists == 'true'
        with: 
          node-version: 20
          cache: npm

      - name: Install dependencies
        if: steps.check_openapi.outputs.exists == 'true'
        run: npm ci

      - name: Generate OpenAPI types
        if: steps.check_openapi.outputs.exists == 'true'
        run: |
          npx -y openapi-typescript ./openapi.yaml -o src/lib/openapi.types.ts || \
          npx -y openapi-typescript ./openapi.yml -o src/lib/openapi.types.ts

      - name: Verify types compile
        if: steps.check_openapi.outputs.exists == 'true'
        run: npx tsc --noEmit

  supabase_types:
    name: Supabase Types
    runs-on: ubuntu-latest
    if: ${{ github.event_name == 'pull_request' }}
    env:
      SUPABASE_PROJECT_ID: ${{ secrets.SUPABASE_PROJECT_ID }}
      SUPABASE_ACCESS_TOKEN: ${{ secrets.SUPABASE_ACCESS_TOKEN }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: actions/setup-node@v4
        with: 
          node-version: 20

      - name: Check if Supabase is configured
        id: check_supabase
        run: |
          if [ -n "$SUPABASE_PROJECT_ID" ] && [ -n "$SUPABASE_ACCESS_TOKEN" ]; then
            echo "configured=true" >> $GITHUB_OUTPUT
          else
            echo "configured=false" >> $GITHUB_OUTPUT
            echo "⚠️ Supabase credentials not configured, skipping type generation"
          fi

      - name: Install Supabase CLI
        if: steps.check_supabase.outputs.configured == 'true'
        run: npm i -g supabase

      - name: Generate database types
        if: steps.check_supabase.outputs.configured == 'true'
        run: supabase gen types typescript --project-id "$SUPABASE_PROJECT_ID" > src/lib/database.types.ts

      - name: Verify types compile
        if: steps.check_supabase.outputs.configured == 'true'
        run: npx tsc --noEmit
